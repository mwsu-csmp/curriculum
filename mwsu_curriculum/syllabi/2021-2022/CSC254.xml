<?xml version="1.0" encoding="UTF-8"?>
<course
  xmlns="https://csmp.missouriwestern.edu"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="https://csmp.missouriwestern.edu/xml/curriculum/course.xsd">
  <college>LA</college>
  <subject>CSC</subject>
  <number>254</number>
  <title>Object Oriented Programming</title>
  <offered>fall</offered>
  <offered>spring</offered>
  <scheduleType>lecture</scheduleType>
  <catalogDescription>
    This course is a continuation of CSC 184 and introduces the Java programming language. Java is used to introduce Object Oriented Programming concepts including data abstraction, classes, inheritance, and polymorphism. Other programming topics covered include multidimensional arrays and array processing, elementary sorting and searching techniques, dynamic memory allocation, linked lists, and GUI interface creating.
  </catalogDescription>
  <prerequisites>
    <prerequisiteCourse minimumGrade="C"><subject>CSC</subject><number>184</number></prerequisiteCourse>
  </prerequisites>

  <objectives>
    <objective>Construct a simple user interface using a standard API.
      <covers standard="acm-cs2013" knowledgeArea="GV/FC" id="4"/>
    </objective>
    <objective>Demonstrate the identification and graceful handling of error conditions.
      <covers standard="acm-cs2013" knowledgeArea="IAS/DP" id="5"/>
    </objective>
    <objective>Describe the main concepts of the OO model.
      <covers standard="acm-cs2013" knowledgeArea="IM/DM" id="6"/>
    </objective>
    <objective>Design and implement a class.
      <covers standard="acm-cs2013" knowledgeArea="PL/OP" id="1"/>
    </objective>
    <objective>Use subclassing to design simple class hierarchies that allow code to be reused for distinct subclasses.
      <covers standard="acm-cs2013" knowledgeArea="PL/OP" id="2"/>
    </objective>
    <objective>Correctly reason about control flow in a program using dynamic dispatch.
      <covers standard="acm-cs2013" knowledgeArea="PL/OP" id="3"/>
    </objective>
    <objective>Explain the relationship between object-oriented inheritance (code-sharing and overriding) and subtyping (the idea of a subtype being usable in a context that expects the supertype).
      <covers standard="acm-cs2013" knowledgeArea="PL/OP" id="5"/>
    </objective>
    <objective>Use object-oriented encapsulation mechanisms such as interfaces and private members.
    </objective>
    <objective>Write event handlers for use in reactive systems, such as GUIs.
      <covers standard="acm-cs2013" knowledgeArea="PL/EARP" id="1"/>
    </objective>
    <objective>For a language with a static type system, describe the operations that are forbidden statically, such as passing the wrong type of value to a function or method.
      <covers standard="acm-cs2013" knowledgeArea="PL/BTS" id="2"/>
    </objective>
    <objective>Explain how typing rules define the set of operations that are legal for a type.
      <covers standard="acm-cs2013" knowledgeArea="PL/BTS" id="7"/>
    </objective>
    <objective>Define and use program pieces (such as functions, classes, methods) that use generic types, including for collections.
      <covers standard="acm-cs2013" knowledgeArea="PL/BTS" id="10"/>
    </objective>
    <objective>Discuss the differences among generics, subtyping, and overloading.
      <covers standard="acm-cs2013" knowledgeArea="PL/BTS" id="11"/>
    </objective>
    <objective>Identify the data components and behaviors of multiple abstract data types.
      <covers standard="acm-cs2013" knowledgeArea="SDF/AAD" id="9"/>
    </objective>
    <objective>Implement a coherent abstract data type, with loose coupling between components and behaviors.
      <covers standard="acm-cs2013" knowledgeArea="SDF/AAD" id="10"/>
    </objective>
  </objectives>
  <outline>
    <topic>Single Dimensional Arrays
        <topic>Array Declarations and Initialization</topic>
        <topic>Processing Array Information</topic>
        <topic>Sorting and Searching an Array</topic>
        <topic>Multidimensional Arrays in Java</topic>
    </topic>
      <topic>Objects and Classes
          <topic>Programming Concepts</topic>
          <topic>Class Declaration</topic>
          <topic>UML</topic>
          <topic>Object initialization using constructors</topic>
          <topic>Object reference variables</topic>
          <topic>Static variables</topic>
          <topic>Visibility Modifiers and Access/Mutator Methods</topic>
          <topic>Passing Objects to Methods</topic>
          <topic>Array of Objects</topic>
      </topic>
      <topic>String and Text
          <topic>Java API Classes for String Manipulation</topic>
          <topic>File based Text I/O</topic>
      </topic>
      <topic>Inheritance and Polymorphism
          <topic>Superclass and Subclass</topic>
          <topic>Method Overriding</topic>
          <topic>toString and equals methods in Object class</topic>
          <topic>Polymorphism, dynamic binding and generic programming</topic>
          <topic>Casting</topic>
          <topic>The “protected” and “final” visibility modifiers</topic>
      </topic>
      <topic>Abstract Classes and Interfaces
          <topic>Abstract Classes and Abstract Methods</topic>
          <topic>Definition of an Interface</topic>
          <topic>Interfaces vs. Abstract Classes</topic>
          <topic>Wrapper Classes</topic>
      </topic>
      <topic>Exception Handling</topic>
      <topic>GUI Basics</topic>
  </outline>
</course>
