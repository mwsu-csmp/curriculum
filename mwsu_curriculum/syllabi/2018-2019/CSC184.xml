<?xml version="1.0" encoding="UTF-8"?>
<course
  xmlns="https://csmp.missouriwestern.edu"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="https://csmp.missouriwestern.edu/xml/curriculum/course.xsd">
  <college>LA</college>
  <subject>CSC</subject>
  <number>184</number>
  <title>Introduction to Computer Programming</title>
  <offered>fall</offered>
  <offered>fall</offered>
  <offered>spring</offered>
  <offered>spring</offered>
  <scheduleType>lecture</scheduleType>
  <catalogDescription> Introduction to problem solving utilizing the Python programming language. Topics include algorithm and program development, syntax of python, file input/output, assignment operations, program control structures, functions, and collections. LAS Computer Literacy. 
  </catalogDescription>
  <prerequisites>
    <prerequisiteDisjunction>
      <prerequisiteCourse minimumGrade="C"><subject>ACT</subject><number>102</number></prerequisiteCourse>
      <prerequisiteCourse minimumGrade="C"><subject>MAT</subject><number>110</number></prerequisiteCourse>
      <prerequisiteCourse minimumGrade="C"><subject>MAT</subject><number>111</number></prerequisiteCourse>
      <prerequisiteCourse minimumGrade="C"><subject>MAT</subject><number>112</number></prerequisiteCourse>
      <prerequisiteCourse minimumGrade="C"><subject>MAT</subject><number>116</number></prerequisiteCourse>
      <prerequisiteCourse minimumGrade="C"><subject>MAT</subject><number>147</number></prerequisiteCourse>
      <prerequisiteCourse minimumGrade="C"><subject>MAT</subject><number>165</number></prerequisiteCourse>
      <prerequisiteCourse minimumGrade="C"><subject>MAT</subject><number>167</number></prerequisiteCourse>
      <prerequisiteGeneral>an ACT math subscore of at least 22</prerequisiteGeneral>
      <prerequisiteGeneral>a sufficient score on the math placement exam</prerequisiteGeneral>
    </prerequisiteDisjunction>
    <!-- will examine outcomes from previous students w/ various levels of math / ACT prep 
   until the style sheet correctly renders this: ACT math subscore of at least 22, a sufficient score on the math placement exam, or a grade of C or higher in either ACT 102 or a general studies math course. 
    
    /-->
  </prerequisites>

  <textbook title="Think Python"
            publisher="O'Reilly Media"
            year="2012"
            ISBN="978-1449330729">
    <author>Allen B. Downey</author>
  </textbook>

  <objectives>
    <objective>Discuss the importance of algorithms in the problem-solving process
      <covers standard="acm:2013" knowledgeArea="SDF/AD" id="1"/>
    </objective>
    <objective>Write pseudocode algorithms for solving simple problems
      <covers standard="acm:2013" knowledgeArea="SDF/AD" id="3"/>
    </objective>
    <objective>Write programs that implement basic numerical algorithms
      <covers standard="acm:2013" knowledgeArea="AL/FDSA" id="1"/>
    </objective>
    <objective>Informally describe possible values for a variety of basic Python types
      <covers standard="acm:2013" knowledgeArea="PL/BTS" id="1"/>
    </objective>
    <objective>Identify and describe examples of program errors
      <covers standard="acm:2013" knowledgeArea="PL/BTS" id="3"/>
    </objective>
    <objective>Use Python to implement, test, and debug simple functions and programs
      <covers standard="acm:2013" knowledgeArea="SDF/AD" id="4"/>
    </objective>
    <objective>Apply the techniques of decomposition to break a program into smaller pieces
      <covers standard="acm:2013" knowledgeArea="SDF/AD" id="8"/>
    </objective>
    <objective>Trace the execution of a variety of Python code segments and write summaries of their computations
      <covers standard="acm:2013" knowledgeArea="SDF/DM" id="1"/>
    </objective>
    <objective>Construct, execute and debug programs using a modern IDE and associated tools such as unit testing tools and visual debuggers
      <covers standard="acm:2013" knowledgeArea="SDF/DM" id="9"/>
    </objective>
    <objective>Construct and debug programs using the standard python libraries
      <covers standard="acm:2013" knowledgeArea="SDF/DM" id="10"/>
    </objective>
    <objective>Identify and describe uses of primitive data types
      <covers standard="acm:2013" knowledgeArea="SDF/FPC" id="2"/>
    </objective>
    <objective>Write programs that use primitive data types
      <covers standard="acm:2013" knowledgeArea="SDF/FPC" id="3"/>
    </objective>
    <objective>Modify and expand short programs that use standard conditional and iterative control structures and functions
      <covers standard="acm:2013" knowledgeArea="SDF/FPC" id="4"/>
    </objective>
    <objective>Design, implement, test, and debug a program that uses each of the following fundamental programming constructs: basic computation, simple I/O, standard conditional and iterative structures, the definition of functions, and parameter passing
      <covers standard="acm:2013" knowledgeArea="SDF/FPC" id="5"/>
    </objective>
    <objective>Develop a Python script to solve a significant problem
    </objective>
    <objective>Write a program that uses file I/O to provide persistence across multiple executions
      <covers standard="acm:2013" knowledgeArea="SDF/FPC" id="6"/>
    </objective>
    <objective>Choose appropriate conditional and iteration constructs for a given programming task
      <covers standard="acm:2013" knowledgeArea="SDF/FPC" id="7"/>
    </objective>
    <objective>Describe the concept of recursion and give examples of its use
      <covers standard="acm:2013" knowledgeArea="SDF/FPC" id="8"/>
    </objective>
  </objectives>
  <outline>

    <topic>Algorithms
      <topic>The algorithm concept
        <covers standard="acm:2013" knowledgeArea="SDF/AD" id="1"/>
      </topic>
      <topic>Writing pseudocode to solve problems
        <covers standard="acm:2013" knowledgeArea="SDF/AD" id="2"/>
      </topic>
      <topic>Simple numerical algorithms
        <covers standard="acm:2013" knowledgeArea="AL/FDSA" id="1"/>
      </topic>
    </topic>

    <topic>Program structure and design
      <topic>The difference between algorithms and programs
        <topic>Syntax</topic>
        <topic>Semantics</topic>
        <topic>Structure of python programs</topic>
        <covers standard="acm:2013" knowledgeArea="SDF/FPC" id="1"/>
      </topic>
      <topic>Reading programs for understanding
        <covers standard="acm:2013" knowledgeArea="SDF/DM" id="1"/>
      </topic>
      <topic>Abstraction
        <covers standard="acm:2013" knowledgeArea="SDF/AD" id="4/1"/>
      </topic>
      <topic>Program decomposition
        <covers standard="acm:2013" knowledgeArea="SDF/AD" id="4/2"/>
      </topic>
      <topic>Nesting</topic>
      <topic>Predicates</topic>
      <topic>Side effects</topic>
      <topic>Common imperative problem solving strategies</topic>
    </topic>

    <topic>Basic types and operations on types
      <topic>Primitive types
        <topic>Integers</topic>
        <topic>Floating point numbers</topic>
        <topic>Characters and character encodings</topic>
        <topic>Booleans</topic>
      </topic>
      <topic>Compound types
        <topic>Strings</topic>
        <topic>Lists</topic>
        <topic>Tuples</topic>
        <topic>Objects</topic>
        <topic>Iterators</topic>
      </topic>
      <topic>References</topic>
      <topic>Type safety
        <covers standard="acm:2013" knowledgeArea="PL/BTS" id="3"/>
      </topic>
      <covers standard="acm:2013" knowledgeArea="PL/BTS" id="1"/>
    </topic>

    <topic>Variables
      <topic>Scope</topic>
      <topic>Parameters / arguments
        <covers standard="acm:2013" knowledgeArea="SDF/FPC" id="6"/>
      </topic>
      <topic>Fields</topic>
      <covers standard="acm:2013" knowledgeArea="PL/BTS" id="2"/>
      <covers standard="acm:2013" knowledgeArea="SDF/FPC" id="2"/>
    </topic>

    <topic>Basic expressions and statements
      <topic>Literal expressions</topic>
      <topic>Arithmetic expressions</topic>
      <topic>Boolean expressions
        <topic>Comparison operators</topic>
        <topic>Conditional operators</topic>
        <topic>Boolean operators</topic>
        <topic>Short circuiting</topic>
      </topic>
      <covers standard="acm:2013" knowledgeArea="SDF/FPC" id="3"/>
    </topic>

    <topic>Control constructs in imperative programming
      <topic>Function calls</topic>
      <topic>Method calls</topic>
      <topic>Conditional statements and expressions</topic>
      <topic>Loops and iteration</topic>
      <topic>Simple recursion
        <covers standard="acm:2013" knowledgeArea="SDF/FPC" id="7"/>
      </topic>
      <covers standard="acm:2013" knowledgeArea="SDF/FPC" id="5"/>
    </topic>

    <topic>Program development 

      <topic>Program correctness
        <topic>The concept of a specification
          <covers standard="acm:2013" knowledgeArea="SDF/DM" id="2/2"/>
        </topic>
        <topic>Incremental development and test cases
          <covers standard="acm:2013" knowledgeArea="SDF/DM" id="2/5"/>
        </topic>
        <topic>Types of errors 
          <topic>Syntax and other compilation errors</topic>
          <topic>Runtime errors</topic>
          <topic>Logic errors</topic>
          <covers standard="acm:2013" knowledgeArea="SDF/DM" id="2/1"/>
        </topic>
        <topic>Debugging strategies
          <covers standard="acm:2013" knowledgeArea="SDF/DM" id="5"/>
        </topic>
        <topic>Unit testing
          <covers standard="acm:2013" knowledgeArea="SDF/DM" id="2/7"/>
        </topic>
      </topic>
    
      <topic>Documentation and program style
        <topic>Identifier naming conventions</topic>
        <topic>Inline commenting</topic>
        <topic>Documentation comments</topic>
        <covers standard="acm:2013" knowledgeArea="SDF/DM" id="6"/>
      </topic>

      <topic>Simple refactoring
        <covers standard="acm:2013" knowledgeArea="SDF/DM" id="3"/>
      </topic>	

      <topic>Program development tools
        <topic>Libraries and application programming interfaces (APIs)</topic>
        <topic>REPLs</topic>
        <topic>Debuggers</topic>
        <topic>Integrated development environments (IDEs)</topic>
        <covers standard="acm:2013" knowledgeArea="SDF/DM" id="4"/>
      </topic>

      <topic>Basic input / output
        <topic>Standard input and standard output</topic>
        <topic>Reading from and writing to files</topic>
        <covers standard="acm:2013" knowledgeArea="SDF/FPC" id="4"/>
      </topic>

      <topic>Executing and sharing programs
        <topic>Modules</topic>
        <topic>Writing and executing scripts
          <topic>Environment variables</topic>
          <topic>Command-line arguments</topic>
          <topic>Text-based user interfaces</topic>
        </topic>
        <topic>Public software repositories</topic>
        <topic>Software licensing</topic>
        <topic>Source code plagiarism</topic>  
      </topic>
    </topic>

  </outline>
</course>
